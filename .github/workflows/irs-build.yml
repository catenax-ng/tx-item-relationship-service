name: IRS build

on:
  workflow_dispatch: # Trigger manually
  pull_request:
    paths-ignore:
      - '**/*.md'
      - '**/*.txt'
  push:
    branches:
      - main
    tags:
      - '**'


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of sonar analysis

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Build with Maven and analyze with Sonar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn --batch-mode --update-snapshots \
          verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}

  build_images:
    strategy:
      matrix:
        image:
          - irs-api
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Build image to make sure Dockerfile is valid
        run: |
          # RUN --mount=type=cache is used in the IRS Dockerfile to cache directories for maven.
          # And the --mount option requires BuildKit.
          DOCKER_BUILDKIT=1 docker build --build-arg BUILD_TARGET=${{ matrix.image }} --target ${{ matrix.image }} -t ${{ matrix.image }}:latest .

      - name: Log in to registry
        env:
          DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}
        if: env.DOCKER_HUB_USER == ''
        # This is where you will update the PAT to GITHUB_TOKEN
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image (GHCR)
        env:
          DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}
        if: env.DOCKER_HUB_USER == ''
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/${{ matrix.image }}
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag ${{ matrix.image }} $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
          
          docker tag ${{ matrix.image }} $IMAGE_ID:$GITHUB_SHA
          docker push $IMAGE_ID:$GITHUB_SHA
          
      - name: Login to Docker Hub
        env:
          DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}
        if: env.DOCKER_HUB_USER != ''
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Push image (DockerHub)
        env:
          DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}
        if: env.DOCKER_HUB_USER != ''
        run: |
          IMAGE_ID=tractusx/${{ matrix.image }}
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag ${{ matrix.image }} $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
