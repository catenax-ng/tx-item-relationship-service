test_name: Make sure server process job after authorization (1.0.0)

strict:
  - headers:off
  - json:off

stages:
  - name: authenticate and fetch access token
    request:
      url: "{tavern.env_vars.KEYCLOAK_HOST}"
      method: POST
      data:
        grant_type: client_credentials
        client_id: "{tavern.env_vars.KEYCLOAK_CLIENT_ID}"
        client_secret: "{tavern.env_vars.KEYCLOAK_CLIENT_SECRET}"
    response:
      status_code: 200
      json:
        token_type: Bearer
      headers:
        content-type: application/json
      save:
        json:
          access_token: access_token

  - name: create a job and wait
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      json:
        globalAssetId: "{tavern.env_vars.GLOBAL_ASSET_ID}"
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 201
      headers:
        content-type: application/json
      save:
        json:
          job_id: jobId
    delay_after: 3

  - name: fetch response for created job
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs/{job_id}"
      params:
        returnUncompletedJob: true
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      headers:
        content-type: application/json

---

test_name: Make sure job with submodels process with status COMPLETED

strict:
  - headers:off
  - json:off

stages:
  - name: authenticate and fetch access token
    request:
      url: "{tavern.env_vars.KEYCLOAK_HOST}"
      method: POST
      data:
        grant_type: client_credentials
        client_id: "{tavern.env_vars.KEYCLOAK_CLIENT_ID}"
        client_secret: "{tavern.env_vars.KEYCLOAK_CLIENT_SECRET}"
    response:
      status_code: 200
      json:
        token_type: Bearer
      headers:
        content-type: application/json
      save:
        json:
          access_token: access_token

  - name: create a job and wait
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      json:
        globalAssetId: "{tavern.env_vars.GLOBAL_ASSET_ID}"
        collectAspects: true
        depth: 10
        direction: "downward"
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 201
      headers:
        content-type: application/json
      save:
        json:
          job_id: jobId
    delay_after: 320

  - name: fetch response for created job
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs/{job_id}"
      params:
        returnUncompletedJob: true
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      json:
        job:
          jobState: COMPLETED
      verify_response_with:
        - function: api-tests.tavern_helpers:submodels_are_not_empty
        - function: api-tests.tavern_helpers:check_timestamps_for_completed_jobs
      headers:
        content-type: application/json

---

test_name: Make sure job without submodels process with status COMPLETED

strict:
  - headers:off
  - json:off

stages:
  - name: authenticate and fetch access token
    request:
      url: "{tavern.env_vars.KEYCLOAK_HOST}"
      method: POST
      data:
        grant_type: client_credentials
        client_id: "{tavern.env_vars.KEYCLOAK_CLIENT_ID}"
        client_secret: "{tavern.env_vars.KEYCLOAK_CLIENT_SECRET}"
    response:
      status_code: 200
      json:
        token_type: Bearer
      headers:
        content-type: application/json
      save:
        json:
          access_token: access_token

  - name: create a job and wait
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      json:
        globalAssetId: "{tavern.env_vars.GLOBAL_ASSET_ID}"
        collectAspects: false
        depth: 10
        direction: "downward"
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 201
      headers:
        content-type: application/json
      save:
        json:
          job_id: jobId
    delay_after: 300

  - name: fetch response for created job
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs/{job_id}"
      params:
        returnUncompletedJob: true
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      json:
        job:
          jobState: COMPLETED
      verify_response_with:
        - function: api-tests.tavern_helpers:submodels_are_empty
        - function: api-tests.tavern_helpers:check_timestamps_for_completed_jobs
      headers:
        content-type: application/json

---


test_name: Make sure job request with invalid globalAssetId syntax return 400-response (1.1.0 + 1.1.1)

strict:
  - headers:off
  - json:off

stages:
  - name: authenticate and fetch access token
    request:
      url: "{tavern.env_vars.KEYCLOAK_HOST}"
      method: POST
      data:
        grant_type: client_credentials
        client_id: "{tavern.env_vars.KEYCLOAK_CLIENT_ID}"
        client_secret: "{tavern.env_vars.KEYCLOAK_CLIENT_SECRET}"
    response:
      status_code: 200
      json:
        token_type: Bearer
      headers:
        content-type: application/json
      save:
        json:
          access_token: access_token

  - name: create a job and check errors in response
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      json:
        globalAssetId: urn:uuid:4ad4a1ce-beb2-42d2-bfe7c6xyz009123452
        collectAspects: true
        depth: 10
        direction: "downward"
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 400
      verify_response_with:
        function: api-tests.tavern_helpers:errors_for_invalid_globalAssetId_are_correct
      json:
        statusCode: BAD_REQUEST
        message: Invalid Arguments.
      headers:
        content-type: application/json

---

test_name: Make sure job with depth and bomLifecycle is processed (1.2.0)

strict:
  - headers:off
  - json:off

stages:
  - name: authenticate and fetch access token
    request:
      url: "{tavern.env_vars.KEYCLOAK_HOST}"
      method: POST
      data:
        grant_type: client_credentials
        client_id: "{tavern.env_vars.KEYCLOAK_CLIENT_ID}"
        client_secret: "{tavern.env_vars.KEYCLOAK_CLIENT_SECRET}"
    response:
      status_code: 200
      json:
        token_type: Bearer
      headers:
        content-type: application/json
      save:
        json:
          access_token: access_token

  - name: create a job and wait
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      json:
        globalAssetId: "{tavern.env_vars.GLOBAL_ASSET_ID}"
        bomLifecycle: "asBuilt"
        depth: 2
        collectAspects: true
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 201
      json:
        jobId: !re_fullmatch "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
      headers:
        content-type: application/json
      save:
        json:
          job_id: jobId
    delay_after: 240

  - name: fetch response for created job and check details
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs/{job_id}"
      params:
        returnUncompletedJob: true
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      json:
        job:
          jobState: COMPLETED
      verify_response_with:
        - function: api-tests.tavern_helpers:tombstones_are_empty
        - function: api-tests.tavern_helpers:relationships_are_not_empty
        - function: api-tests.tavern_helpers:submodels_are_not_empty
        - function: api-tests.tavern_helpers:check_timestamps_for_completed_jobs
      headers:
        content-type: application/json


---

test_name: Make sure job with aspect serialPartTypization is processed (1.3.0)

strict:
  - headers:off
  - json:off

stages:
  - name: authenticate and fetch access token
    request:
      url: "{tavern.env_vars.KEYCLOAK_HOST}"
      method: POST
      data:
        grant_type: client_credentials
        client_id: "{tavern.env_vars.KEYCLOAK_CLIENT_ID}"
        client_secret: "{tavern.env_vars.KEYCLOAK_CLIENT_SECRET}"
    response:
      status_code: 200
      json:
        token_type: Bearer
      headers:
        content-type: application/json
      save:
        json:
          access_token: access_token

  - name: create a job and wait
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      json:
        globalAssetId: "{tavern.env_vars.GLOBAL_ASSET_ID}"
        aspects:
          - SerialPartTypization
        collectAspects: true
        depth: 10
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 201
      json:
        jobId: !re_fullmatch "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
      headers:
        content-type: application/json
      save:
        json:
          job_id: jobId
    delay_after: 320

  - name: fetch response for created job and check details
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs/{job_id}"
      params:
        returnUncompletedJob: true
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      json:
        job:
          jobState: COMPLETED
      verify_response_with:
        - function: api-tests.tavern_helpers:tombstones_are_empty
        - function: api-tests.tavern_helpers:relationships_are_not_empty
        - function: api-tests.tavern_helpers:submodels_are_not_empty
        - function: api-tests.tavern_helpers:check_timestamps_for_completed_jobs
      headers:
        content-type: application/json

---

test_name: Make sure job with aspects SerialPartTypization and AssemblyPartRelationship is processed (1.3.1)

strict:
  - headers:off
  - json:off

stages:
  - name: authenticate and fetch access token
    request:
      url: "{tavern.env_vars.KEYCLOAK_HOST}"
      method: POST
      data:
        grant_type: client_credentials
        client_id: "{tavern.env_vars.KEYCLOAK_CLIENT_ID}"
        client_secret: "{tavern.env_vars.KEYCLOAK_CLIENT_SECRET}"
    response:
      status_code: 200
      json:
        token_type: Bearer
      headers:
        content-type: application/json
      save:
        json:
          access_token: access_token

  - name: create a job and wait
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      json:
        globalAssetId: "{tavern.env_vars.GLOBAL_ASSET_ID}"
        aspects:
          - SerialPartTypization
          - AssemblyPartRelationship
        collectAspects: true
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 201
      json:
        jobId: !re_fullmatch "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
      headers:
        content-type: application/json
      save:
        json:
          job_id: jobId
    delay_after: 240

  - name: fetch response for created job and check details
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs/{job_id}"
      params:
        returnUncompletedJob: true
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      json:
        job:
          jobState: COMPLETED
      verify_response_with:
        - function: api-tests.tavern_helpers:tombstones_are_empty
        - function: api-tests.tavern_helpers:relationships_are_not_empty
        - function: api-tests.tavern_helpers:submodels_are_not_empty
        - function: api-tests.tavern_helpers:check_timestamps_for_completed_jobs
      headers:
        content-type: application/json


---

test_name: Make sure job with aspects BatteryPass and MaterialForRecycling is processed (1.3.2)

strict:
  - headers:off
  - json:off

stages:
  - name: authenticate and fetch access token
    request:
      url: "{tavern.env_vars.KEYCLOAK_HOST}"
      method: POST
      data:
        grant_type: client_credentials
        client_id: "{tavern.env_vars.KEYCLOAK_CLIENT_ID}"
        client_secret: "{tavern.env_vars.KEYCLOAK_CLIENT_SECRET}"
    response:
      status_code: 200
      json:
        token_type: Bearer
      headers:
        content-type: application/json
      save:
        json:
          access_token: access_token

  - name: create a job and wait
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      json:
        globalAssetId: "{tavern.env_vars.GLOBAL_ASSET_ID}"
        aspects:
          - BatteryPass
          - MaterialForRecycling
        collectAspects: true
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 201
      json:
        jobId: !re_fullmatch "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
      headers:
        content-type: application/json
      save:
        json:
          job_id: jobId
    delay_after: 240

  - name: fetch response for created job and check details
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs/{job_id}"
      params:
        returnUncompletedJob: true
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      json:
        job:
          jobState: COMPLETED
      verify_response_with:
        - function: api-tests.tavern_helpers:tombstones_are_empty
        - function: api-tests.tavern_helpers:relationships_are_not_empty
        - function: api-tests.tavern_helpers:submodels_are_not_empty
        - function: api-tests.tavern_helpers:check_timestamps_for_completed_jobs
      headers:
        content-type: application/json


---

test_name: Make sure job with aspects Batch and CertificateOfDestruction is processed (1.3.3)

strict:
  - headers:off
  - json:off

stages:
  - name: authenticate and fetch access token
    request:
      url: "{tavern.env_vars.KEYCLOAK_HOST}"
      method: POST
      data:
        grant_type: client_credentials
        client_id: "{tavern.env_vars.KEYCLOAK_CLIENT_ID}"
        client_secret: "{tavern.env_vars.KEYCLOAK_CLIENT_SECRET}"
    response:
      status_code: 200
      json:
        token_type: Bearer
      headers:
        content-type: application/json
      save:
        json:
          access_token: access_token

  - name: create a job and wait
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      json:
        globalAssetId: "{tavern.env_vars.GLOBAL_ASSET_ID}"
        aspects:
          - Batch
          - CertificateOfDestruction
        collectAspects: true
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 201
      json:
        jobId: !re_fullmatch "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
      headers:
        content-type: application/json
      save:
        json:
          job_id: jobId
    delay_after: 300

  - name: fetch response for created job and check details
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs/{job_id}"
      params:
        returnUncompletedJob: true
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      json:
        job:
          jobState: COMPLETED
      verify_response_with:
        - function: api-tests.tavern_helpers:tombstones_are_empty
        - function: api-tests.tavern_helpers:relationships_are_not_empty
        - function: api-tests.tavern_helpers:submodels_are_not_empty
        - function: api-tests.tavern_helpers:check_timestamps_for_completed_jobs
      headers:
        content-type: application/json


---

test_name: Make sure job with aspects SerialPartTypization and DiagnosticData is processed (1.3.4)

strict:
  - headers:off
  - json:off

stages:
  - name: authenticate and fetch access token
    request:
      url: "{tavern.env_vars.KEYCLOAK_HOST}"
      method: POST
      data:
        grant_type: client_credentials
        client_id: "{tavern.env_vars.KEYCLOAK_CLIENT_ID}"
        client_secret: "{tavern.env_vars.KEYCLOAK_CLIENT_SECRET}"
    response:
      status_code: 200
      json:
        token_type: Bearer
      headers:
        content-type: application/json
      save:
        json:
          access_token: access_token

  - name: create a job and wait
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      json:
        globalAssetId: "{tavern.env_vars.GLOBAL_ASSET_ID}"
        aspects:
          - SerialPartTypization
          - DiagnosticData
        collectAspects: true
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 201
      json:
        jobId: !re_fullmatch "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
      headers:
        content-type: application/json
      save:
        json:
          job_id: jobId
    delay_after: 240

  - name: fetch response for created job and check details
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs/{job_id}"
      params:
        returnUncompletedJob: true
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      json:
        job:
          jobState: COMPLETED
      verify_response_with:
        - function: api-tests.tavern_helpers:tombstones_are_empty
        - function: api-tests.tavern_helpers:relationships_are_not_empty
        - function: api-tests.tavern_helpers:submodels_are_not_empty
        - function: api-tests.tavern_helpers:check_timestamps_for_completed_jobs
      headers:
        content-type: application/json


---

test_name: Make sure job with invalid aspects is giving the correct error message (1.4.1)

strict:
  - headers:off
  - json:off

stages:
  - name: authenticate and fetch access token
    request:
      url: "{tavern.env_vars.KEYCLOAK_HOST}"
      method: POST
      data:
        grant_type: client_credentials
        client_id: "{tavern.env_vars.KEYCLOAK_CLIENT_ID}"
        client_secret: "{tavern.env_vars.KEYCLOAK_CLIENT_SECRET}"
    response:
      status_code: 200
      json:
        token_type: Bearer
      headers:
        content-type: application/json
      save:
        json:
          access_token: access_token

  - name: create a job and wait
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      json:
        globalAssetId: "{tavern.env_vars.GLOBAL_ASSET_ID}"
        aspects:
          - UnknownAspect
        collectAspects: true
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 400
      json:
        statusCode: BAD_REQUEST
        message: "NoSuchElementException: Unsupported AspectType: UnknownAspect. Must be one of: AddressAspect, AssemblyPartRelationship, Batch, BatteryPass, CertificateOfDestruction, CertificateOfDismantler, ChargingProcess, ClaimData, DiagnosticData, EndOfLife, EsrCertificate, EsrCertificateStateStatistic, IdConversion, MarketplaceOffer, MaterialForHomologation, MaterialForRecycling, PartAsPlanned, PhysicalDimension, ProductDescription, ReturnRequest, SerialPartTypization, SingleLevelBomAsPlanned, SingleLevelUsageAsBuilt"
        errors: null
      headers:
        content-type: application/json

---

test_name: Make sure job with all valid aspects is processed (1.5.0)

strict:
  - headers:off
  - json:off

stages:
  - name: authenticate and fetch access token
    request:
      url: "{tavern.env_vars.KEYCLOAK_HOST}"
      method: POST
      data:
        grant_type: client_credentials
        client_id: "{tavern.env_vars.KEYCLOAK_CLIENT_ID}"
        client_secret: "{tavern.env_vars.KEYCLOAK_CLIENT_SECRET}"
    response:
      status_code: 200
      json:
        token_type: Bearer
      headers:
        content-type: application/json
      save:
        json:
          access_token: access_token

  - name: create a job and wait
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      json:
        globalAssetId: "{tavern.env_vars.GLOBAL_ASSET_ID}"
        aspects:
          - SerialPartTypization
          - AssemblyPartRelationship
          - Batch
          - ProductDescription
          - IdConversion
          - MarketplaceOffer
          - MaterialForRecycling
          - PhysicalDimension
          - ReturnRequest
          - CertificateOfDestruction
          - CertificateOfDismantler
          - EndOfLife
          - EsrCertificate
          - EsrCertificateStateStatistic
          - ChargingProcess
          - AddressAspect
          - ClaimData
          - BatteryPass
          - DiagnosticData
          - MaterialForHomologation
          - PartAsPlanned
        collectAspects: true
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 201
      json:
        jobId: !re_fullmatch "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
      headers:
        content-type: application/json
      save:
        json:
          job_id: jobId
    delay_after: 340

  - name: fetch response for created job and check details
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs/{job_id}"
      params:
        returnUncompletedJob: true
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      json:
        job:
          jobState: COMPLETED
      verify_response_with:
        - function: api-tests.tavern_helpers:tombstones_are_empty
        - function: api-tests.tavern_helpers:relationships_are_not_empty
        - function: api-tests.tavern_helpers:submodels_are_not_empty
        - function: api-tests.tavern_helpers:check_timestamps_for_completed_jobs
      headers:
        content-type: application/json


---

test_name: Make sure job with DEPRECATED Catena-X semantichub aspect is processed as expected

strict:
  - headers:off
  - json:off

marks:
  - parametrize:
      key:
        deprecated_aspect
      vals:
        - VehicleDiagnosticDataQuality
        - PcfCore
        - PcfSupplyRelation
        - PcfTechnical
        - ContactInformation

stages:
  - name: authenticate and fetch access token
    request:
      url: "{tavern.env_vars.KEYCLOAK_HOST}"
      method: POST
      data:
        grant_type: client_credentials
        client_id: "{tavern.env_vars.KEYCLOAK_CLIENT_ID}"
        client_secret: "{tavern.env_vars.KEYCLOAK_CLIENT_SECRET}"
    response:
      status_code: 200
      json:
        token_type: Bearer
      headers:
        content-type: application/json
      save:
        json:
          access_token: access_token

  - name: create a job and wait
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      json:
        globalAssetId: "{tavern.env_vars.GLOBAL_ASSET_ID}"
        aspects:
          - "{deprecated_aspect}"
        collectAspects: true
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 400
      json:
        statusCode: BAD_REQUEST
        message: "NoSuchElementException: Unsupported AspectType: {deprecated_aspect}. Must be one of: AddressAspect, AssemblyPartRelationship, Batch, BatteryPass, CertificateOfDestruction, CertificateOfDismantler, ChargingProcess, ClaimData, DiagnosticData, EndOfLife, EsrCertificate, EsrCertificateStateStatistic, IdConversion, MarketplaceOffer, MaterialForHomologation, MaterialForRecycling, PartAsPlanned, PhysicalDimension, ProductDescription, ReturnRequest, SerialPartTypization, SingleLevelBomAsPlanned, SingleLevelUsageAsBuilt"
        errors: null
      headers:
        content-type: application/json


---


test_name: Make sure search for COMPLETED jobs only returns COMPLETED status (2.0.0)

strict:
  - headers:off
  - json:off

stages:
  - name: authenticate and fetch access token
    request:
      url: "{tavern.env_vars.KEYCLOAK_HOST}"
      method: POST
      data:
        grant_type: client_credentials
        client_id: "{tavern.env_vars.KEYCLOAK_CLIENT_ID}"
        client_secret: "{tavern.env_vars.KEYCLOAK_CLIENT_SECRET}"
    response:
      status_code: 200
      json:
        token_type: Bearer
      headers:
        content-type: application/json
      save:
        json:
          access_token: access_token

  - name: get all COMPLETED jobs
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs?jobStates=COMPLETED"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        function: api-tests.tavern_helpers:status_of_jobs_are_as_expected
        extra_kwargs:
          expected_status: COMPLETED
      headers:
        content-type: application/json


---


test_name: Make sure search for ERROR jobs only returns ERROR status (2.0.1)

strict:
  - headers:off
  - json:off

stages:
  - name: authenticate and fetch access token
    request:
      url: "{tavern.env_vars.KEYCLOAK_HOST}"
      method: POST
      data:
        grant_type: client_credentials
        client_id: "{tavern.env_vars.KEYCLOAK_CLIENT_ID}"
        client_secret: "{tavern.env_vars.KEYCLOAK_CLIENT_SECRET}"
    response:
      status_code: 200
      json:
        token_type: Bearer
      headers:
        content-type: application/json
      save:
        json:
          access_token: access_token

  - name: get all ERROR jobs
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs?jobStates=ERROR"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        function: api-tests.tavern_helpers:status_of_jobs_are_as_expected
        extra_kwargs:
          expected_status: ERROR
      headers:
        content-type: application/json


---


test_name: Make sure search for INITIAL jobs only returns INITIAL status (2.0.2)

strict:
  - headers:off
  - json:off

stages:
  - name: authenticate and fetch access token
    request:
      url: "{tavern.env_vars.KEYCLOAK_HOST}"
      method: POST
      data:
        grant_type: client_credentials
        client_id: "{tavern.env_vars.KEYCLOAK_CLIENT_ID}"
        client_secret: "{tavern.env_vars.KEYCLOAK_CLIENT_SECRET}"
    response:
      status_code: 200
      json:
        token_type: Bearer
      headers:
        content-type: application/json
      save:
        json:
          access_token: access_token

  - name: get all INITIAL jobs
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs?jobStates=INITIAL"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        function: api-tests.tavern_helpers:status_of_jobs_are_as_expected
        extra_kwargs:
          expected_status: INITIAL
      headers:
        content-type: application/json



---



test_name: Make sure search for RUNNING jobs only returns RUNNING status (2.1.0)

strict:
  - headers:off
  - json:off

stages:
  - name: authenticate and fetch access token
    request:
      url: "{tavern.env_vars.KEYCLOAK_HOST}"
      method: POST
      data:
        grant_type: client_credentials
        client_id: "{tavern.env_vars.KEYCLOAK_CLIENT_ID}"
        client_secret: "{tavern.env_vars.KEYCLOAK_CLIENT_SECRET}"
    response:
      status_code: 200
      json:
        token_type: Bearer
      headers:
        content-type: application/json
      save:
        json:
          access_token: access_token

  - name: create a job for the next step
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      json:
        globalAssetId: "{tavern.env_vars.GLOBAL_ASSET_ID}"
        aspects:
          - SerialPartTypization
          - DiagnosticData
        collectAspects: true
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 201
      headers:
        content-type: application/json

  - name: get all RUNNING jobs
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs?jobStates=RUNNING"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        function: api-tests.tavern_helpers:status_of_jobs_are_as_expected
        extra_kwargs:
          expected_status: RUNNING
      headers:
        content-type: application/json


---



test_name: Make sure search for all jobs returns all status (2.0.3)

strict:
  - headers:off
  - json:off

stages:
  - name: authenticate and fetch access token
    request:
      url: "{tavern.env_vars.KEYCLOAK_HOST}"
      method: POST
      data:
        grant_type: client_credentials
        client_id: "{tavern.env_vars.KEYCLOAK_CLIENT_ID}"
        client_secret: "{tavern.env_vars.KEYCLOAK_CLIENT_SECRET}"
    response:
      status_code: 200
      json:
        token_type: Bearer
      headers:
        content-type: application/json
      save:
        json:
          access_token: access_token

  - name: get all jobs
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        function: api-tests.tavern_helpers:status_of_all_jobs_are_given
      headers:
        content-type: application/json



---


test_name: Check if error message for searching a job with too long job-ID is correct (3.1.1)

strict:
  - headers:off
  - json:off

stages:
  - name: authenticate and fetch access token
    request:
      url: "{tavern.env_vars.KEYCLOAK_HOST}"
      method: POST
      data:
        grant_type: client_credentials
        client_id: "{tavern.env_vars.KEYCLOAK_CLIENT_ID}"
        client_secret: "{tavern.env_vars.KEYCLOAK_CLIENT_SECRET}"
    response:
      status_code: 200
      json:
        token_type: Bearer
      headers:
        content-type: application/json
      save:
        json:
          access_token: access_token

  - name: get job for unknown globalAssetId
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs/bc1b4f4f-aa00-4296-8738-e7913c95f2d99"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 400
      json:
        statusCode: BAD_REQUEST
        message: UUID string too large
      headers:
        content-type: application/json


---


test_name: Check if error message for searching a job with unknown job-ID is correct (3.1.2)

strict:
  - headers:off
  - json:off

stages:
  - name: authenticate and fetch access token
    request:
      url: "{tavern.env_vars.KEYCLOAK_HOST}"
      method: POST
      data:
        grant_type: client_credentials
        client_id: "{tavern.env_vars.KEYCLOAK_CLIENT_ID}"
        client_secret: "{tavern.env_vars.KEYCLOAK_CLIENT_SECRET}"
    response:
      status_code: 200
      json:
        token_type: Bearer
      headers:
        content-type: application/json
      save:
        json:
          access_token: access_token

  - name: get job for unknown globalAssetId
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs/bc1b4f4f-aa00-4296-8738-e7913c95f2d9"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 404
      json:
        statusCode: NOT_FOUND
        message: Not Found
      verify_response_with:
        function: api-tests.tavern_helpers:errors_for_unknown_requested_globalAssetId_are_correct
      headers:
        content-type: application/json

---


test_name: Make sure search for all jobs returns startTime for all status

strict:
  - headers:off
  - json:off

stages:
  - name: authenticate and fetch access token
    request:
      url: "{tavern.env_vars.KEYCLOAK_HOST}"
      method: POST
      data:
        grant_type: client_credentials
        client_id: "{tavern.env_vars.KEYCLOAK_CLIENT_ID}"
        client_secret: "{tavern.env_vars.KEYCLOAK_CLIENT_SECRET}"
    response:
      status_code: 200
      json:
        token_type: Bearer
      headers:
        content-type: application/json
      save:
        json:
          access_token: access_token

  - name: get all jobs
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        function: api-tests.tavern_helpers:check_startedOn_timestamp_exists
      headers:
        content-type: application/json


---


test_name: Make sure search for running jobs returns no jobCompleted timestamp

strict:
  - headers:off
  - json:off

stages:
  - name: authenticate and fetch access token
    request:
      url: "{tavern.env_vars.KEYCLOAK_HOST}"
      method: POST
      data:
        grant_type: client_credentials
        client_id: "{tavern.env_vars.KEYCLOAK_CLIENT_ID}"
        client_secret: "{tavern.env_vars.KEYCLOAK_CLIENT_SECRET}"
    response:
      status_code: 200
      json:
        token_type: Bearer
      headers:
        content-type: application/json
      save:
        json:
          access_token: access_token

  - name: get all jobs with status UNSAVED, INITIAL, RUNNING, TRANSFERS_FINISHED and CANCELED
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs?jobStates=UNSAVED, INITIAL, RUNNING, TRANSFERS_FINISHED, CANCELED"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        - function: api-tests.tavern_helpers:check_startedOn_timestamp_exists
        - function: api-tests.tavern_helpers:check_jobCompleted_timestamp_not_exists
      headers:
        content-type: application/json


---


test_name: Make sure search for completed jobs returns jobCompleted timestamp

strict:
  - headers:off
  - json:off

stages:
  - name: authenticate and fetch access token
    request:
      url: "{tavern.env_vars.KEYCLOAK_HOST}"
      method: POST
      data:
        grant_type: client_credentials
        client_id: "{tavern.env_vars.KEYCLOAK_CLIENT_ID}"
        client_secret: "{tavern.env_vars.KEYCLOAK_CLIENT_SECRET}"
    response:
      status_code: 200
      json:
        token_type: Bearer
      headers:
        content-type: application/json
      save:
        json:
          access_token: access_token

  - name: get all jobs with status COMPLETED and ERROR
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs?jobStates=COMPLETED, ERROR"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        - function: api-tests.tavern_helpers:check_startedOn_timestamp_exists
        - function: api-tests.tavern_helpers:check_jobCompleted_timestamp_exists
      headers:
        content-type: application/json


---


test_name: Make sure search for completed jobs returns startedOn timestamp smaller than jobCompleted timestamp

strict:
  - headers:off
  - json:off

stages:
  - name: authenticate and fetch access token
    request:
      url: "{tavern.env_vars.KEYCLOAK_HOST}"
      method: POST
      data:
        grant_type: client_credentials
        client_id: "{tavern.env_vars.KEYCLOAK_CLIENT_ID}"
        client_secret: "{tavern.env_vars.KEYCLOAK_CLIENT_SECRET}"
    response:
      status_code: 200
      json:
        token_type: Bearer
      headers:
        content-type: application/json
      save:
        json:
          access_token: access_token

  - name: get all jobs with status COMPLETED and ERROR
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs?jobStates=COMPLETED, ERROR"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        - function: api-tests.tavern_helpers:check_startedOn_timestamp_exists
        - function: api-tests.tavern_helpers:check_jobCompleted_timestamp_exists
        - function: api-tests.tavern_helpers:check_startedOn_is_smaller_than_jobCompleted
      headers:
        content-type: application/json


---


test_name: Make sure job with bomLifecycle asPlanned + asBuilt get correct error response

strict:
  - headers:off
  - json:off

stages:
  - name: authenticate and fetch access token
    request:
      url: "{tavern.env_vars.KEYCLOAK_HOST}"
      method: POST
      data:
        grant_type: client_credentials
        client_id: "{tavern.env_vars.KEYCLOAK_CLIENT_ID}"
        client_secret: "{tavern.env_vars.KEYCLOAK_CLIENT_SECRET}"
    response:
      status_code: 200
      json:
        token_type: Bearer
      headers:
        content-type: application/json
      save:
        json:
          access_token: access_token

  - name: create a job and check error in response
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      json:
        globalAssetId: "{tavern.env_vars.GLOBAL_ASSET_ID}"
        collectAspects: true
        depth: 10
        direction: "downward"
        bomLifecycle: "asPlanned, asBuilt"
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 400
      json:
        statusCode: BAD_REQUEST
        message: "NoSuchElementException: Unsupported BomLifecycle: asPlanned, asBuilt. Must be one of: asBuilt, asPlanned"
        errors: null
      headers:
        content-type: application/json


---


test_name: Make sure job with unknown globalAssetId are responsed with correct tombstone

strict:
  - headers:off
  - json:off

stages:
  - name: authenticate and fetch access token
    request:
      url: "{tavern.env_vars.KEYCLOAK_HOST}"
      method: POST
      data:
        grant_type: client_credentials
        client_id: "{tavern.env_vars.KEYCLOAK_CLIENT_ID}"
        client_secret: "{tavern.env_vars.KEYCLOAK_CLIENT_SECRET}"
    response:
      status_code: 200
      json:
        token_type: Bearer
      headers:
        content-type: application/json
      save:
        json:
          access_token: access_token

  - name: create a job with unknown globalAssetId
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      json:
        globalAssetId: urn:uuid:cce14502-958a-42e1-8bb7-f4f41aaaaaaa
        collectAspects: true
        depth: 10
        direction: "downward"
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 201
      headers:
        content-type: application/json
      save:
        json:
          job_id: jobId
    delay_after: 50

  - name: fetch response for created job
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs/{job_id}"
      params:
        returnUncompletedJob: true
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      json:
        job:
          jobState: COMPLETED
      verify_response_with:
        - function: api-tests.tavern_helpers:submodels_are_empty
        - function: api-tests.tavern_helpers:relationships_are_empty
        - function: api-tests.tavern_helpers:check_timestamps_for_completed_jobs
        - function: api-tests.tavern_helpers:errors_for_unknown_globalAssetId_are_correct
      headers:
        content-type: application/json