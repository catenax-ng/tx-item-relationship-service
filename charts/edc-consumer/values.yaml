##############################
# EDC Postgres Configuration #
##############################
postgresql:
  auth:
    username: edc
    database: edc
    postgresPassword: <postgres-admin-password>
    password: <postgres-password>

##################################
# EDC Controlplane Configuration #
##################################
edc-controlplane:
  ingresses:
    - enabled: true
      hostname: "<controlplane-url>"
      annotations:
        nginx.ingress.kubernetes.io/ssl-passthrough: "false"
        nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      endpoints:
        - ids
        - data
      className: ""
      tls:
        - hosts:
            - "<controlplane-url>"
          secretName: tls-secret
      certManager:
        issuer: ""
        clusterIssuer: ""

  edc:
    receiver:
      callback:
        url:
      receiver:
        callback:
          url: "http://{{ .Release.Name }}-irs-helm:8181/internal/endpoint-data-reference" # IRS EDC callback URL, e.g. http://app-irs-helm:8181/internal/endpoint-data-reference
    postgresql:
      user: edc
      password: <postgres-password>
    transfer:
      proxy:
        token:
          verifier:
            publickey:
              alias: <daps-certificate-name>
          signer:
            privatekey:
              alias: <daps-privatekey-name>
    api:
      auth:
        key: "<edc-api-key>"
    controlplane:
      url: "https://<controlplane-url>"
    dataplane:
      url: "https://<dataplane-url>"
  configuration:
    properties: |-
      edc.oauth.client.id=<daps-client-id>
      edc.oauth.private.key.alias=<daps-privatekey-name>
      edc.oauth.provider.jwks.url=<daps-jwks-url>
      edc.oauth.public.key.alias=<daps-certificate-name>
      edc.oauth.token.url=<daps-token-url>
      edc.vault.hashicorp.url=<vault-url>
      edc.vault.hashicorp.token=<vault-token>
      edc.vault.hashicorp.api.secret.path=<vault-secret-store-path>
      edc.data.encryption.keys.alias=<daps-privatekey-name>
      edc.data.encryption.algorithm=NONE

###############################
# EDC Dataplane Configuration #
###############################
edc-dataplane:
  edc:
    api:
      auth:
        key: "<edc-api-key>"
  ## Ingress declaration to expose the network service.
  ingresses:
    - enabled: true
      hostname: "<dataplane-url>"
      annotations:
        nginx.ingress.kubernetes.io/ssl-passthrough: "false"
        nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      endpoints:
        - public
      className: "nginx"
      tls:
        - hosts:
            - "<dataplane-url>"
          secretName: tls-secret
      certManager:
        issuer: ""
        clusterIssuer: ""

  configuration:
    properties: |-
      edc.oauth.client.id=<daps-client-id>
      edc.oauth.private.key.alias=<daps-privatekey-name>
      edc.oauth.provider.audience=idsc:IDS_CONNECTORS_ALL
      edc.oauth.provider.jwks.url=<daps-jwks-url>
      edc.oauth.public.key.alias=<daps-certificate-name>
      edc.oauth.token.url=<daps-token-url>
      edc.vault.hashicorp.url=<vault-url>
      edc.vault.hashicorp.token=<vault-token>
      edc.vault.hashicorp.api.secret.path=<vault-secret-store-path>
