test_name: Make sure investigation job with valid globalAssetId and BPN is processed correctly with MOCK

strict:
  - headers:off
  - json:off

stages:
  - &authenticate_and_fetch_token
    name: authenticate and fetch access token
    request:
      url: "{tavern.env_vars.KEYCLOAK_HOST}"
      method: POST
      data:
        grant_type: client_credentials
        client_id: "{tavern.env_vars.KEYCLOAK_CLIENT_ID}"
        client_secret: "{tavern.env_vars.KEYCLOAK_CLIENT_SECRET}"
    response:
      status_code: 200
      json:
        token_type: Bearer
      headers:
        content-type: application/json
      save:
        json:
          access_token: access_token

  - name: register a BPN investigation with valid globalAssetId
    request:
      url: "{tavern.env_vars.IRS_ESS_HOST}/ess/bpn/investigations"
      json:
        globalAssetId: urn:uuid:2c57b0e9-a653-411d-bdcd-64787e9fd3a7
        bomLifecycle: asPlanned
        callbackUrl: http://testikus.com
        incidentBpns:
          - BPNL00000003B6LU
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 201
      headers:
        content-type: application/json
      save:
        json:
          job_id: id

  - &verify_ESS_job_response_with_desired_test_steps_and_wait_up_to_15_minutes_for_COMPLETED
    name: verify job response with desired test steps and wait for desired job status
    max_retries: 90
    request:
      url: "{tavern.env_vars.IRS_ESS_HOST}/ess/bpn/investigations/{job_id}"
      params:
        returnUncompletedJob: true
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      json:
        job:
          state: COMPLETED
    delay_after: 10

  - name: get response for created investigation
    request:
      url: "{tavern.env_vars.IRS_ESS_HOST}/ess/bpn/investigations/{job_id}"
      params:
        returnUncompletedJob: true
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        - function: api-tests.tavern_helpers:supplyChainImpacted_is_correct_in_submodels_for_valid_ID
      headers:
        content-type: application/json


---


test_name: Make sure investigation job with valid globalAssetId for unknown BPN is processed correctly with MOCK

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: register a BPN investigation with valid globalAssetId for unknown BPN
    request:
      url: "{tavern.env_vars.IRS_ESS_HOST}/ess/bpn/investigations"
      json:
        globalAssetId: urn:uuid:2c57b0e9-a653-411d-bdcd-64787e9fd3a7
        bomLifecycle: asPlanned
        callbackUrl: http://testikus.com
        incidentBpns:
          - BPNL00ARBITRARY1
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 201
      headers:
        content-type: application/json
      save:
        json:
          job_id: id

  - *verify_ESS_job_response_with_desired_test_steps_and_wait_up_to_15_minutes_for_COMPLETED

  - name: get response for created investigation
    request:
      url: "{tavern.env_vars.IRS_ESS_HOST}/ess/bpn/investigations/{job_id}"
      params:
        returnUncompletedJob: true
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        - function: api-tests.tavern_helpers:supplyChainImpacted_is_correct_in_submodels_for_valid_ID_in_unknown_BPN
      headers:
        content-type: application/json


---


test_name: Make sure investigation job with invalid request is handled correctly with MOCK

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: register a BPN investigation with invalid request
    request:
      url: "{tavern.env_vars.IRS_ESS_HOST}/ess/bpn/investigations"
      json:
        globalAssetId111: urn:uuid:2c57b0e9-a653-411d-bdcd-64787e9fd3a7
        incidentBpns11:
          - BPNL00000003B6LU
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 400
      verify_response_with:
        function: api-tests.tavern_helpers:errors_for_invalid_investigation_request_are_correct
      json:
        statusCode: BAD_REQUEST
        error: "Invalid Arguments."
      headers:
        content-type: application/json


---


test_name: Make sure investigation job with unknown globalAssetId and BPN is processed correctly with MOCK

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: register a BPN investigation with unknown globalAssetId
    request:
      url: "{tavern.env_vars.IRS_ESS_HOST}/ess/bpn/investigations"
      json:
        globalAssetId: urn:uuid:2c57b0e9-a653-411d-bdcd-64787e955555
        incidentBpns:
          - BPNL00000003B6LU
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 201
      headers:
        content-type: application/json
      save:
        json:
          job_id: id
    delay_after: 5

  - name: get response for created investigation
    request:
      url: "{tavern.env_vars.IRS_ESS_HOST}/ess/bpn/investigations/{job_id}"
      params:
        returnUncompletedJob: true
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      json:
        job:
          state: COMPLETED
      verify_response_with:
        - function: api-tests.tavern_helpers:supplyChainImpacted_is_correct_in_submodels_for_unknown_ID
      headers:
        content-type: application/json


---


test_name: Make sure investigation job with several relationships for valid globalAssetId and BPN is processed correctly with MOCK

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: register a BPN investigation with valid globalAssetId with several relationships
    request:
      url: "{tavern.env_vars.IRS_ESS_HOST}/ess/bpn/investigations"
      json:
        globalAssetId: urn:uuid:aad27ddb-43aa-4e42-98c2-01e529ef127c
        incidentBpns:
          - BPNL00ARBITRARY1
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 201
      headers:
        content-type: application/json
      save:
        json:
          job_id: id

  - *verify_ESS_job_response_with_desired_test_steps_and_wait_up_to_15_minutes_for_COMPLETED

  - name: get response for created investigation
    request:
      url: "{tavern.env_vars.IRS_ESS_HOST}/ess/bpn/investigations/{job_id}"
      params:
        returnUncompletedJob: true
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        - function: api-tests.tavern_helpers:supplyChainImpacted_is_correct_in_submodels_for_valid_ID
        - function: api-tests.tavern_helpers:relationships_for_BPN_investigations_contains_several_childs
      headers:
        content-type: application/json


---


test_name: Make sure investigation job with valid globalAssetId and BPN is processed correctly in T-Systems

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: register a BPN investigation with valid globalAssetId to T-Systems
    request:
      url: "{tavern.env_vars.IRS_ESS_HOST}/ess/bpn/investigations"
      json:
        globalAssetId: urn:uuid:c7a2b803-f8fe-4b79-b6fc-967ce847c9a9
        bomLifecycle: asPlanned
        callbackUrl: http://testikus.com
        incidentBpns:
          - BPNL00000003B0Q0
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 201
      headers:
        content-type: application/json
      save:
        json:
          job_id: id

  - *verify_ESS_job_response_with_desired_test_steps_and_wait_up_to_15_minutes_for_COMPLETED

  - name: get response for created investigation
    request:
      url: "{tavern.env_vars.IRS_ESS_HOST}/ess/bpn/investigations/{job_id}"
      params:
        returnUncompletedJob: true
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        - function: api-tests.tavern_helpers:supplyChainImpacted_is_correct_in_submodels_for_valid_ID
      headers:
        content-type: application/json


---


test_name: Make sure investigation job with valid globalAssetId and BPN is processed in submodel servers correctly in MOCK

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: register a BPN investigation with valid globalAssetId for processing in submodel servers in MOCK
    request:
      url: "{tavern.env_vars.IRS_ESS_HOST}/ess/bpn/investigations"
      json:
        globalAssetId: urn:uuid:1c7a25ea-0490-4944-b9c9-d8c666d47958
        incidentBpns:
          - BPNL00ARBITRARY7
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 201
      headers:
        content-type: application/json
      save:
        json:
          job_id: id

  - *verify_ESS_job_response_with_desired_test_steps_and_wait_up_to_15_minutes_for_COMPLETED

  - name: get response for created investigation
    request:
      url: "{tavern.env_vars.IRS_ESS_HOST}/ess/bpn/investigations/{job_id}"
      params:
        returnUncompletedJob: true
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        - function: api-tests.tavern_helpers:supplyChainImpacted_is_correct_in_submodels_for_valid_ID
        - function: api-tests.tavern_helpers:tombstones_are_empty
        - function: api-tests.tavern_helpers:relationships_are_not_empty
        - function: api-tests.tavern_helpers:submodels_are_not_empty
        - function: api-tests.tavern_helpers:check_timestamps_for_completed_jobs
      headers:
        content-type: application/json

############################## /\ ESS Tests /\ ##############################
---


test_name: Make sure server process job after authorization (1.0.0)

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: create a job and check for success
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      json:
        globalAssetId: "{tavern.env_vars.GLOBAL_ASSET_ID}"
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 201
      headers:
        content-type: application/json
      save:
        json:
          job_id: id
    delay_after: 3

  - name: verify job response with desired test steps
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs/{job_id}"
      params:
        returnUncompletedJob: true
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      headers:
        content-type: application/json

---

test_name: Make sure job with submodels process with status COMPLETED

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: create a job and check for success
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      json:
        globalAssetId: "{tavern.env_vars.GLOBAL_ASSET_ID}"
        collectAspects: true
        depth: 1
        direction: "downward"
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 201
      headers:
        content-type: application/json
      save:
        json:
          job_id: id

  - &verify_job_response_with_desired_test_steps_and_wait_up_to_15_minutes_for_COMPLETED
    name: verify job response with desired test steps and wait for desired job status
    max_retries: 90
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs/{job_id}"
      params:
        returnUncompletedJob: true
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      json:
        job:
          state: COMPLETED
    delay_after: 10

  - name: verify job response with desired test steps
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs/{job_id}"
      params:
        returnUncompletedJob: true
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        - function: api-tests.tavern_helpers:submodels_are_not_empty
        - function: api-tests.tavern_helpers:check_timestamps_for_completed_jobs
      headers:
        content-type: application/json

---

test_name: Make sure job without submodels process with status COMPLETED

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: create a job and check for success
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      json:
        globalAssetId: "{tavern.env_vars.GLOBAL_ASSET_ID}"
        collectAspects: false
        depth: 1
        direction: "downward"
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 201
      headers:
        content-type: application/json
      save:
        json:
          job_id: id

  - *verify_job_response_with_desired_test_steps_and_wait_up_to_15_minutes_for_COMPLETED

  - name: verify job response with desired test steps
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs/{job_id}"
      params:
        returnUncompletedJob: true
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        - function: api-tests.tavern_helpers:submodels_are_empty
        - function: api-tests.tavern_helpers:check_timestamps_for_completed_jobs
      headers:
        content-type: application/json

---


test_name: Make sure job request with invalid globalAssetId syntax return 400-response (1.1.0 + 1.1.1)

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: create a job and check errors in response
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      json:
        globalAssetId: urn:uuid:4ad4a1ce-beb2-42d2-bfe7c6xyz009123452
        collectAspects: true
        depth: 1
        direction: "downward"
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 400
      verify_response_with:
        function: api-tests.tavern_helpers:errors_for_invalid_globalAssetId_are_correct
      json:
        statusCode: BAD_REQUEST
        error: Invalid Arguments.
      headers:
        content-type: application/json

---

test_name: Make sure job with depth and bomLifecycle is processed (1.2.0)

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: create a job and check for success
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      json:
        globalAssetId: "{tavern.env_vars.GLOBAL_ASSET_ID}"
        bomLifecycle: "asBuilt"
        depth: 2
        collectAspects: true
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 201
      json:
        id: !re_fullmatch "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
      headers:
        content-type: application/json
      save:
        json:
          job_id: id

  - *verify_job_response_with_desired_test_steps_and_wait_up_to_15_minutes_for_COMPLETED

  - name: verify job response with desired test steps and check details
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs/{job_id}"
      params:
        returnUncompletedJob: true
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        #  - function: api-tests.tavern_helpers:tombstones_are_empty
        - function: api-tests.tavern_helpers:relationships_are_not_empty
        - function: api-tests.tavern_helpers:submodels_are_not_empty
        - function: api-tests.tavern_helpers:check_timestamps_for_completed_jobs
      headers:
        content-type: application/json


---

test_name: Make sure job with aspect serialPartTypization is processed (1.3.0)

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: create a job and check for success
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      json:
        globalAssetId: "{tavern.env_vars.GLOBAL_ASSET_ID}"
        aspects:
          - SerialPartTypization
        collectAspects: true
        depth: 1
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 201
      json:
        id: !re_fullmatch "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
      headers:
        content-type: application/json
      save:
        json:
          job_id: id

  - *verify_job_response_with_desired_test_steps_and_wait_up_to_15_minutes_for_COMPLETED

  - name: verify job response with desired test steps and check details
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs/{job_id}"
      params:
        returnUncompletedJob: true
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        #- function: api-tests.tavern_helpers:tombstones_are_empty
        - function: api-tests.tavern_helpers:relationships_are_not_empty
        - function: api-tests.tavern_helpers:submodels_are_not_empty
        - function: api-tests.tavern_helpers:check_timestamps_for_completed_jobs
      headers:
        content-type: application/json

---

test_name: Make sure job with aspects SerialPartTypization and AssemblyPartRelationship is processed (1.3.1)

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: create a job and check for success
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      json:
        globalAssetId: "{tavern.env_vars.GLOBAL_ASSET_ID}"
        aspects:
          - SerialPartTypization
          - AssemblyPartRelationship
        collectAspects: true
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 201
      json:
        id: !re_fullmatch "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
      headers:
        content-type: application/json
      save:
        json:
          job_id: id

  - *verify_job_response_with_desired_test_steps_and_wait_up_to_15_minutes_for_COMPLETED

  - *authenticate_and_fetch_token

  - name: verify job response with desired test steps and check details
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs/{job_id}"
      params:
        returnUncompletedJob: true
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        #- function: api-tests.tavern_helpers:tombstones_are_empty
        - function: api-tests.tavern_helpers:relationships_are_not_empty
        - function: api-tests.tavern_helpers:submodels_are_not_empty
        - function: api-tests.tavern_helpers:check_timestamps_for_completed_jobs
      headers:
        content-type: application/json


---

test_name: Make sure job with aspects BatteryPass and MaterialForRecycling is processed (1.3.2)

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: create a job and check for success
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      json:
        globalAssetId: "{tavern.env_vars.GLOBAL_ASSET_ID}"
        aspects:
          - BatteryPass
          - MaterialForRecycling
        collectAspects: true
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 201
      json:
        id: !re_fullmatch "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
      headers:
        content-type: application/json
      save:
        json:
          job_id: id

  - *verify_job_response_with_desired_test_steps_and_wait_up_to_15_minutes_for_COMPLETED

  - name: verify job response with desired test steps and check details
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs/{job_id}"
      params:
        returnUncompletedJob: true
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        #- function: api-tests.tavern_helpers:tombstones_are_empty
        - function: api-tests.tavern_helpers:relationships_are_not_empty
        - function: api-tests.tavern_helpers:submodels_are_not_empty
        - function: api-tests.tavern_helpers:check_timestamps_for_completed_jobs
      headers:
        content-type: application/json


---

test_name: Make sure job with aspects Batch and CertificateOfDestruction is processed (1.3.3)

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: create a job and check for success
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      json:
        globalAssetId: "{tavern.env_vars.GLOBAL_ASSET_ID}"
        aspects:
          - Batch
          - CertificateOfDestruction
        collectAspects: true
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 201
      json:
        id: !re_fullmatch "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
      headers:
        content-type: application/json
      save:
        json:
          job_id: id

  - *verify_job_response_with_desired_test_steps_and_wait_up_to_15_minutes_for_COMPLETED

  - name: verify job response with desired test steps and check details
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs/{job_id}"
      params:
        returnUncompletedJob: true
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        #- function: api-tests.tavern_helpers:tombstones_are_empty
        - function: api-tests.tavern_helpers:relationships_are_not_empty
        - function: api-tests.tavern_helpers:submodels_are_not_empty
        - function: api-tests.tavern_helpers:check_timestamps_for_completed_jobs
      headers:
        content-type: application/json


---

test_name: Make sure job with aspects SerialPartTypization and DiagnosticData is processed (1.3.4)

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: create a job and check for success
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      json:
        globalAssetId: "{tavern.env_vars.GLOBAL_ASSET_ID}"
        aspects:
          - SerialPartTypization
          - DiagnosticData
        collectAspects: true
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 201
      json:
        id: !re_fullmatch "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
      headers:
        content-type: application/json
      save:
        json:
          job_id: id

  - *verify_job_response_with_desired_test_steps_and_wait_up_to_15_minutes_for_COMPLETED

  - name: verify job response with desired test steps and check details
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs/{job_id}"
      params:
        returnUncompletedJob: true
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        # - function: api-tests.tavern_helpers:tombstones_are_empty
        - function: api-tests.tavern_helpers:relationships_are_not_empty
        - function: api-tests.tavern_helpers:submodels_are_not_empty
        - function: api-tests.tavern_helpers:check_timestamps_for_completed_jobs
      headers:
        content-type: application/json


---

test_name: Make sure job with invalid aspects is giving the correct error message (1.4.1)

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: create a job and check for success
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      json:
        globalAssetId: "{tavern.env_vars.GLOBAL_ASSET_ID}"
        aspects:
          - UnknownAspect
        collectAspects: true
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 400
      json:
        statusCode: BAD_REQUEST
        error: "Aspects did not match the available aspects: '[UnknownAspect]'"
        messages: null
      headers:
        content-type: application/json


---


test_name: Make sure job can be returned correctly with returnUncompletedJob = true

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: create a job and check for success
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      json:
        globalAssetId: "{tavern.env_vars.GLOBAL_ASSET_ID}"
        aspects:
          - SerialPartTypization
          - AssemblyPartRelationship
          - Batch
          - ProductDescription
          - IdConversion
          - MarketplaceOffer
          - MaterialForRecycling
          - PhysicalDimension
          - ReturnRequest
          - CertificateOfDestruction
          - CertificateOfDismantler
        collectAspects: true
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 201
      json:
        id: !re_fullmatch "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
      headers:
        content-type: application/json
      save:
        json:
          job_id: id
    delay_after: 100

  - name: fetch response for running job and check existence of submodels and relationships
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs/{job_id}"
      params:
        returnUncompletedJob: true
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      json:
        job:
          state: RUNNING
      verify_response_with:
        - function: api-tests.tavern_helpers:relationships_are_not_empty
        - function: api-tests.tavern_helpers:submodels_are_not_empty
      headers:
        content-type: application/json


---


test_name: Make sure job request with invalid depth return 400-response

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: create a job and check errors in response
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      json:
        globalAssetId: urn:uuid:4ad4a1ce-beb2-42d2-bfe7c6xyz009123452
        collectAspects: true
        depth: -10
        direction: "downward"
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 400
      verify_response_with:
        function: api-tests.tavern_helpers:errors_for_invalid_depth_are_correct
      json:
        statusCode: BAD_REQUEST
        error: Invalid Arguments.
      headers:
        content-type: application/json


---


test_name: Make sure job with all valid aspects is processed (1.5.0)

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: create a job and check for success
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      json:
        globalAssetId: "{tavern.env_vars.GLOBAL_ASSET_ID}"
        aspects:
          - SerialPartTypization
          - AssemblyPartRelationship
          - Batch
          - ProductDescription
          - IdConversion
          - MarketplaceOffer
          - MaterialForRecycling
          - PhysicalDimension
          - ReturnRequest
          - CertificateOfDestruction
          - CertificateOfDismantler
          - EndOfLife
          - EsrCertificate
          - EsrCertificateStateStatistic
          - ChargingProcess
          - AddressAspect
          - ClaimData
          - BatteryPass
          - DiagnosticData
          - MaterialForHomologation
          - PartAsPlanned
        collectAspects: true
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 201
      json:
        id: !re_fullmatch "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
      headers:
        content-type: application/json
      save:
        json:
          job_id: id

  - *verify_job_response_with_desired_test_steps_and_wait_up_to_15_minutes_for_COMPLETED

  - *authenticate_and_fetch_token

  - name: verify job response with desired test steps and check details
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs/{job_id}"
      params:
        returnUncompletedJob: true
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        # - function: api-tests.tavern_helpers:tombstones_are_empty
        - function: api-tests.tavern_helpers:relationships_are_not_empty
        - function: api-tests.tavern_helpers:submodels_are_not_empty
        - function: api-tests.tavern_helpers:check_timestamps_for_completed_jobs
      headers:
        content-type: application/json


  #---
  #
  #test_name: Make sure job with DEPRECATED Catena-X semantichub aspect is processed as expected
  #
  #strict:
  #  - headers:off
  #  - json:off
  #
  #marks:
  #  - parametrize:
  #      key:
  #        deprecated_aspect
  #      vals:
  #        - VehicleDiagnosticDataQuality
  #        - PcfCore
  #        - PcfSupplyRelation
  #        - PcfTechnical
  #        - ContactInformation
  #
  #stages:
  #  - *authenticate_and_fetch_token
  #
  #  - name: create a job and check for success
  #    request:
  #      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
  #      json:
  #        globalAssetId: "{tavern.env_vars.GLOBAL_ASSET_ID}"
  #        aspects:
  #          - "{deprecated_aspect}"
  #        collectAspects: true
  #      method: POST
  #      headers:
  #        content-type: application/json
  #        Authorization: "Bearer {access_token:s}"
  #    response:
  #      status_code: 400
  #      json:
  #        statusCode: BAD_REQUEST
  #        error: "Aspects did not match the available aspects: '[{deprecated_aspect}]'"
  ##        messages: null
  #     headers:
  #       content-type: application/json

---


test_name: Make sure search for COMPLETED jobs only returns COMPLETED status (2.0.0)

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: get all COMPLETED jobs
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs?states=COMPLETED"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        function: api-tests.tavern_helpers:status_of_jobs_are_as_expected
        extra_kwargs:
          expected_status: COMPLETED
      headers:
        content-type: application/json


---


test_name: Make sure search for ERROR jobs only returns ERROR status (2.0.1)

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: get all ERROR jobs
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs?states=ERROR"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        function: api-tests.tavern_helpers:status_of_jobs_are_as_expected
        extra_kwargs:
          expected_status: ERROR
      headers:
        content-type: application/json


---


test_name: Make sure search for INITIAL jobs only returns INITIAL status (2.0.2)

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: get all INITIAL jobs
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs?states=INITIAL"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        function: api-tests.tavern_helpers:status_of_jobs_are_as_expected
        extra_kwargs:
          expected_status: INITIAL
      headers:
        content-type: application/json



---



test_name: Make sure search for RUNNING jobs only returns RUNNING status (2.1.0)

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: create a job for the next step
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      json:
        globalAssetId: "{tavern.env_vars.GLOBAL_ASSET_ID}"
        aspects:
          - SerialPartTypization
          - DiagnosticData
        collectAspects: true
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 201
      headers:
        content-type: application/json

  - name: get all RUNNING jobs
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs?states=RUNNING"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        function: api-tests.tavern_helpers:status_of_jobs_are_as_expected
        extra_kwargs:
          expected_status: RUNNING
      headers:
        content-type: application/json


---



test_name: Make sure search for all jobs returns all status (2.0.3)

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: get all jobs
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        function: api-tests.tavern_helpers:status_of_all_jobs_are_given
      headers:
        content-type: application/json



---


test_name: Check if error message for searching a job with too long job-ID is correct (3.1.1)

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: get job for unknown globalAssetId
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs/bc1b4f4f-aa00-4296-8738-e7913c95f2d99"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 400
      json:
        statusCode: BAD_REQUEST
        error: UUID string too large
      headers:
        content-type: application/json


---


test_name: Check if error message for searching a job with unknown job-ID is correct (3.1.2)

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: get job for unknown globalAssetId
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs/bc1b4f4f-aa00-4296-8738-e7913c95f2d9"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 404
      json:
        statusCode: NOT_FOUND
        error: Not Found
      verify_response_with:
        function: api-tests.tavern_helpers:errors_for_unknown_requested_globalAssetId_are_correct
      headers:
        content-type: application/json

---


test_name: Make sure search for all jobs returns startTime for all status

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: get all jobs
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        function: api-tests.tavern_helpers:check_startedOn_timestamp_exists
      headers:
        content-type: application/json


---


test_name: Make sure cancellation of irs-job works correct

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: create a job
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      json:
        globalAssetId: "{tavern.env_vars.GLOBAL_ASSET_ID}"
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 201
      headers:
        content-type: application/json
      save:
        json:
          job_id: id
    delay_after: 3

  - name: cancel the job
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs/{job_id}"
      method: PUT
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      headers:
        content-type: application/json

  - name: verify job response with desired test steps
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs/{job_id}"
      params:
        returnUncompletedJob: true
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      json:
        job:
          state: CANCELED
      headers:
        content-type: application/json


---


test_name: Make sure search for running jobs returns no completedOn timestamp

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: get all jobs with status UNSAVED, INITIAL, RUNNING, TRANSFERS_FINISHED and CANCELED
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs?states=UNSAVED, INITIAL, RUNNING, TRANSFERS_FINISHED, CANCELED"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        - function: api-tests.tavern_helpers:check_startedOn_timestamp_exists
        - function: api-tests.tavern_helpers:check_completedOn_timestamp_not_exists
      headers:
        content-type: application/json


---


test_name: Make sure search for completed jobs returns completedOn timestamp

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: get all jobs with status COMPLETED and ERROR
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs?states=COMPLETED, ERROR"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        - function: api-tests.tavern_helpers:check_startedOn_timestamp_exists
        - function: api-tests.tavern_helpers:check_completedOn_timestamp_exists
      headers:
        content-type: application/json


---


test_name: Make sure search for completed jobs returns startedOn timestamp smaller than completedOn timestamp

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: get all jobs with status COMPLETED and ERROR
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs?states=COMPLETED, ERROR"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        - function: api-tests.tavern_helpers:check_startedOn_timestamp_exists
        - function: api-tests.tavern_helpers:check_completedOn_timestamp_exists
        - function: api-tests.tavern_helpers:check_startedOn_is_smaller_than_completedOn
      headers:
        content-type: application/json


---


test_name: Make sure job with bomLifecycle asPlanned + asBuilt get correct error response

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: create a job and check error in response
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      json:
        globalAssetId: "{tavern.env_vars.GLOBAL_ASSET_ID}"
        collectAspects: true
        depth: 1
        direction: "downward"
        bomLifecycle: "asPlanned, asBuilt"
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 400
      json:
        statusCode: BAD_REQUEST
        error: "NoSuchElementException: Unsupported BomLifecycle: asPlanned, asBuilt. Must be one of: asBuilt, asPlanned"
        messages: null
      headers:
        content-type: application/json


---


test_name: Make sure job with unknown globalAssetId are responsed with correct tombstone

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: create a job with unknown globalAssetId
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      json:
        globalAssetId: urn:uuid:cce14502-958a-42e1-8bb7-f4f41aaaaaaa
        collectAspects: true
        depth: 1
        direction: "downward"
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 201
      headers:
        content-type: application/json
      save:
        json:
          job_id: id

  - *verify_job_response_with_desired_test_steps_and_wait_up_to_15_minutes_for_COMPLETED

  - name: verify job response with desired test steps
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs/{job_id}"
      params:
        returnUncompletedJob: true
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        - function: api-tests.tavern_helpers:submodels_are_empty
        - function: api-tests.tavern_helpers:relationships_are_empty
        - function: api-tests.tavern_helpers:check_timestamps_for_completed_jobs
        - function: api-tests.tavern_helpers:errors_for_unknown_globalAssetId_are_correct
      headers:
        content-type: application/json


---


test_name: Make sure pagination details exist as expected

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: get all jobs
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        function: api-tests.tavern_helpers:check_pagination_details_exists
      headers:
        content-type: application/json


---


test_name: Make sure pagination can be requested as expected

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: get all jobs with requested pagination settings
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs?page=1&size=3&sort=jobCompleted,asc"
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        function: api-tests.tavern_helpers:check_pagination_is_requested_correctly
      headers:
        content-type: application/json


---


test_name: Make sure IRS-jobs are running without BPN-lookups by default

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: create a job and check for success
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      json:
        globalAssetId: "{tavern.env_vars.GLOBAL_ASSET_ID}"
        collectAspects: false
        depth: 1
        direction: "downward"
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 201
      headers:
        content-type: application/json
      save:
        json:
          job_id: id

  - *verify_job_response_with_desired_test_steps_and_wait_up_to_15_minutes_for_COMPLETED

  - name: verify job response with desired test steps
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs/{job_id}"
      params:
        returnUncompletedJob: true
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        - function: api-tests.tavern_helpers:bpns_are_empty
      headers:
        content-type: application/json


---


test_name: Make sure IRS-jobs are running with BPN-lookups correctly

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: create a job with lookupBPNs = true and wait
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      json:
        globalAssetId: "{tavern.env_vars.GLOBAL_ASSET_ID}"
        collectAspects: false
        lookupBPNs: true
        depth: 1
        direction: "downward"
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 201
      headers:
        content-type: application/json
      save:
        json:
          job_id: id

  - *verify_job_response_with_desired_test_steps_and_wait_up_to_15_minutes_for_COMPLETED

  - name: verify job response with desired test steps
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs/{job_id}"
      params:
        returnUncompletedJob: true
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        - function: api-tests.tavern_helpers:bpns_are_not_empty
      headers:
        content-type: application/json


---


test_name: Make sure IRS-jobs with BPN-lookups content summary information

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: create a job with lookupBPNs = true and wait
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs"
      json:
        globalAssetId: "{tavern.env_vars.GLOBAL_ASSET_ID}"
        collectAspects: false
        lookupBPNs: true
        depth: 1
        direction: "downward"
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 201
      headers:
        content-type: application/json
      save:
        json:
          job_id: id

  - *verify_job_response_with_desired_test_steps_and_wait_up_to_15_minutes_for_COMPLETED

  - name: verify job response with desired test steps
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/jobs/{job_id}"
      params:
        returnUncompletedJob: true
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        - function: api-tests.tavern_helpers:bpns_are_not_empty
        - function: api-tests.tavern_helpers:summary_for_bpns_is_given
      headers:
        content-type: application/json


---


test_name: Make sure batch-job with several valid globalAssetIds has been requested correctly

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: create a batch job with several valid globalAssetIds
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/orders"
      json:
        globalAssetIds:
          - urn:uuid:771d2ccc-a081-4d3a-bcb2-46c6a0a33743
          - urn:uuid:3db730be-9de5-4db5-a58d-684de36484e7
          - urn:uuid:73173bf5-08df-4898-9d6d-8899015c161e
          - urn:uuid:07e0997f-4212-4456-8f27-164b30fc8355
          - urn:uuid:88f51be1-3771-4335-8b5c-4c5050123127
          - urn:uuid:d3c0bf85-d44f-47c5-990d-fec8a36065c6
          - urn:uuid:a1082992-cc3b-4da1-af6b-aa692ed71461
          - urn:uuid:b21cfd5b-dcf4-46fa-9227-3eb693567dd8
          - urn:uuid:8f9d8c7f-6d7a-48f1-9959-9fa3a1a7a891
          - urn:uuid:ceb6b964-5779-49c1-b5e9-0ee70528fcbd
          - urn:uuid:a4a26b9c-9460-4cc5-8645-85916b86adb0
          - urn:uuid:7b87f5d6-f75e-40f1-a439-779ae9f57a21
          - urn:uuid:8914a66e-b59b-405f-afff-b97d71ebece3
          - urn:uuid:61a22b1c-5725-41fb-8e1e-dccaaba83838
          - urn:uuid:0ea1aa79-10d4-4df1-8a5a-5b7eafd26163
          - urn:uuid:1e35e091-3d3d-421e-9c7e-14cf1c9442a6
          - urn:uuid:cc8e9448-b294-46e7-8110-337e8bfa3001
          - urn:uuid:fa5804f1-8d4e-437c-aca2-a5491be61758
          - urn:uuid:a0f6803c-e4dc-4cda-8ad2-91cc57868449
          - urn:uuid:492781f5-62ff-4fb2-876c-3498e2844d13
          - urn:uuid:d6142601-5e09-45fe-9b42-e53cf8cd458c
        aspects:
          - "AssemblyPartRelationship"
          - "SerialPartTypization"
        collectAspects: true
        lookupBPNs: true
        batchSize: 10
        batchStrategy: "PRESERVE_BATCH_JOB_ORDER"
        depth: 1
        direction: "downward"
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 201
      headers:
        content-type: application/json
      save:
        json:
          job_id: id

  - name: verify job response with desired test steps
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/orders/{job_id}"
      params:
        returnUncompletedJob: true
      method: GET
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 200
      verify_response_with:
        function: api-tests.tavern_helpers:order_informations_for_batchprocessing_are_given
        extra_kwargs:
          amount_batches: 3
      headers:
        content-type: application/json


---


test_name: Make sure batch-job with invalid request data has been responsed correctly

strict:
  - headers:off
  - json:off

stages:
  - *authenticate_and_fetch_token

  - name: create a batch job with several valid globalAssetIds but invalid batchSize and check response
    request:
      url: "{tavern.env_vars.IRS_HOST}/irs/orders"
      json:
        globalAssetIds:
          - urn:uuid:771d2ccc-a081-4d3a-bcb2-46c6a0a33743
          - urn:uuid:3db730be-9de5-4db5-a58d-684de36484e7
          - urn:uuid:73173bf5-08df-4898-9d6d-8899015c161e
        aspects:
          - "AssemblyPartRelationship"
          - "SerialPartTypization"
        collectAspects: true
        lookupBPNs: true
        batchSize: 2
        batchStrategy: "PRESERVE_BATCH_JOB_ORDER"
        depth: 1
        direction: "downward"
      method: POST
      headers:
        content-type: application/json
        Authorization: "Bearer {access_token:s}"
    response:
      status_code: 400
      verify_response_with:
        function: api-tests.tavern_helpers:errors_for_invalid_batchSize_are_correct
      json:
        statusCode: BAD_REQUEST
        error: Invalid Arguments.
      headers:
        content-type: application/json
